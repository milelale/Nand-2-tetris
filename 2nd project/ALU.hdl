// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a= x, b[0..15] = false, sel= zx, out= zx1);
    Not16(in= zx1, out= Notzx1);
    Mux16(a= zx1, b= Notzx1, sel= nx, out= nx1);

    Mux16(a= y,b[0..15] = false, sel= zy, out= zy1);
    Not16(in= zy1, out= Notzy1);
    Mux16(a= zy1, b= Notzy1, sel= ny, out= ny1);

    Add16(a = nx1, b = ny1, out = sumXY);
    And16(a= nx1, b= ny1, out= andXY);
    Mux16(a= andXY, b= sumXY, sel= f, out= outF);

    Not16(in= outF, out= notOutf);

    Mux16(a= outF, b= notOutf, sel= no, out[0..7]= out1,out[0..7] = out[0..7], out[8..15] = out2,out[8..15] = out[8..15], out[15] = MSB);

    Or8Way(in= out1, out= or1);
    Or8Way(in= out2, out= or2);
    Or(a= or1, b= or2, out= orF);
    Not(in= orF, out= zr);
    And(a= MSB, b= true, out= ng);    
}